Feb 1st - Special Array 1

https://leetcode.com/problems/special-array-i/?envType=daily-question&envId=2025-02-01

class Solution {
public:
    bool isArraySpecial(vector<int>& nums) {
        
        if(nums.size() == 1)
        {
            return true;
        }
        for(int i = 0;i<nums.size()-1;i++)
        {
            if(nums[i]%2 == 0 && nums[i+1]%2 ==0)
            {
                return false;
            }
            else if(nums[i]%2 !=0 && nums[i+1]%2 != 0)
            {
                return false;
            }
        }
        return true;
    }
};



Feb 2nd - 1752. Check if Array Is Sorted and Rotated

https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/description/?envType=daily-question&envId=2025-02-02

class Solution {
public:
    bool check(vector<int>& nums) {
        int count =0;
        int n = nums.size();
        for(int i=1;i<n;i++)
        {
            if(nums[i-1]>nums[i])
            {
                count++;
            }
        }
        if(nums[n-1]>nums[0])
        {
            count++;
        }
        
        return count<=1;
    }
};


Feb 3rd - 3105. Longest Strictly Increasing or Strictly Decreasing Subarray


https://leetcode.com/problems/longest-strictly-increasing-or-strictly-decreasing-subarray/?envType=daily-question&envId=2025-02-03

class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n = nums.size();
        int ans = 1;
        int inc = 1;
        int dec = 1;
        for(int i = 1;i<nums.size();i++)
        {
            if(nums[i]>nums[i-1])
            {
                inc++;
                dec = 1;
            }
            else if (nums[i]<nums[i-1])
            {
                dec++;
                inc = 1;
            }
            else
            {
                inc = 1;
                dec = 1;
            }
            ans = max(ans,max(inc,dec));
        }
        return ans;
    }
};


Feb 4th - 1800. Maximum Ascending Subarray Sum

class Solution {
public:
    int maxAscendingSum(vector<int>& nums) {
        

        if(nums.size() == 0)
        {
            return 0;
        }

        int sum = nums[0];
        int ans = nums[0];
        for(int i = 1;i<nums.size();i++)
        {
            if(nums[i]>nums[i-1])
            {
                sum = sum + nums[i];
            }
            else{
                sum = nums[i];
            }
            ans = max(ans,sum);
        }
        return ans;
    }
};

Feb 5th - 1790. Check if One String Swap Can Make Strings Equal

https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/description/?envType=daily-question&envId=2025-02-05


class Solution {
public:
    bool areAlmostEqual(string s1, string s2) {
        
        if(s1.size()!=s2.size())
        {
            return false;
        }
        else if(s1 == s2)
        {
            return true;
        }

        int i = 0;
        int j = 0;

        int firstPointer = -1;
        int secondPointer = -1;
        while(i<s1.size())
        {
            if(s1[i] != s2[i])
            {
                if(firstPointer == -1)
                {
                    firstPointer = i;
                }
                else
                    secondPointer = i;
            }
            i++;
        }

        if(firstPointer != -1 && secondPointer != -1)
        {
            swap(s2[firstPointer],s2[secondPointer]);
        }
        if(s1 == s2)
        {
            return true;
        }

        return false;

    }
};

